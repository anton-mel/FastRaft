// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: raft/proto/load_driver.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoadDriverService_ApplyCommand_FullMethodName = "/proto.LoadDriverService/ApplyCommand"
	LoadDriverService_GetLogs_FullMethodName      = "/proto.LoadDriverService/GetLogs"
)

// LoadDriverServiceClient is the client API for LoadDriverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoadDriverServiceClient interface {
	ApplyCommand(ctx context.Context, in *ApplyCommandRequest, opts ...grpc.CallOption) (*ApplyCommandResponse, error)
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error)
}

type loadDriverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadDriverServiceClient(cc grpc.ClientConnInterface) LoadDriverServiceClient {
	return &loadDriverServiceClient{cc}
}

func (c *loadDriverServiceClient) ApplyCommand(ctx context.Context, in *ApplyCommandRequest, opts ...grpc.CallOption) (*ApplyCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyCommandResponse)
	err := c.cc.Invoke(ctx, LoadDriverService_ApplyCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadDriverServiceClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLogsResponse)
	err := c.cc.Invoke(ctx, LoadDriverService_GetLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadDriverServiceServer is the server API for LoadDriverService service.
// All implementations must embed UnimplementedLoadDriverServiceServer
// for forward compatibility.
type LoadDriverServiceServer interface {
	ApplyCommand(context.Context, *ApplyCommandRequest) (*ApplyCommandResponse, error)
	GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error)
	mustEmbedUnimplementedLoadDriverServiceServer()
}

// UnimplementedLoadDriverServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoadDriverServiceServer struct{}

func (UnimplementedLoadDriverServiceServer) ApplyCommand(context.Context, *ApplyCommandRequest) (*ApplyCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyCommand not implemented")
}
func (UnimplementedLoadDriverServiceServer) GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedLoadDriverServiceServer) mustEmbedUnimplementedLoadDriverServiceServer() {}
func (UnimplementedLoadDriverServiceServer) testEmbeddedByValue()                           {}

// UnsafeLoadDriverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoadDriverServiceServer will
// result in compilation errors.
type UnsafeLoadDriverServiceServer interface {
	mustEmbedUnimplementedLoadDriverServiceServer()
}

func RegisterLoadDriverServiceServer(s grpc.ServiceRegistrar, srv LoadDriverServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoadDriverServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoadDriverService_ServiceDesc, srv)
}

func _LoadDriverService_ApplyCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadDriverServiceServer).ApplyCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadDriverService_ApplyCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadDriverServiceServer).ApplyCommand(ctx, req.(*ApplyCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadDriverService_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadDriverServiceServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadDriverService_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadDriverServiceServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoadDriverService_ServiceDesc is the grpc.ServiceDesc for LoadDriverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoadDriverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LoadDriverService",
	HandlerType: (*LoadDriverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyCommand",
			Handler:    _LoadDriverService_ApplyCommand_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _LoadDriverService_GetLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft/proto/load_driver.proto",
}
