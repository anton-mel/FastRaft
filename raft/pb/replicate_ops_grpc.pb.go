// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: raft/proto/replicate_ops.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReplicateOperationService_CommitOperation_FullMethodName  = "/proto.ReplicateOperationService/CommitOperation"
	ReplicateOperationService_ApplyOperation_FullMethodName   = "/proto.ReplicateOperationService/ApplyOperation"
	ReplicateOperationService_ForwardOperation_FullMethodName = "/proto.ReplicateOperationService/ForwardOperation"
)

// ReplicateOperationServiceClient is the client API for ReplicateOperationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicateOperationServiceClient interface {
	CommitOperation(ctx context.Context, in *CommitTransaction, opts ...grpc.CallOption) (*CommitOperationResponse, error)
	ApplyOperation(ctx context.Context, in *ApplyOperationRequest, opts ...grpc.CallOption) (*ApplyOperationResponse, error)
	ForwardOperation(ctx context.Context, in *ForwardOperationRequest, opts ...grpc.CallOption) (*ForwardOperationResponse, error)
}

type replicateOperationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicateOperationServiceClient(cc grpc.ClientConnInterface) ReplicateOperationServiceClient {
	return &replicateOperationServiceClient{cc}
}

func (c *replicateOperationServiceClient) CommitOperation(ctx context.Context, in *CommitTransaction, opts ...grpc.CallOption) (*CommitOperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitOperationResponse)
	err := c.cc.Invoke(ctx, ReplicateOperationService_CommitOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicateOperationServiceClient) ApplyOperation(ctx context.Context, in *ApplyOperationRequest, opts ...grpc.CallOption) (*ApplyOperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyOperationResponse)
	err := c.cc.Invoke(ctx, ReplicateOperationService_ApplyOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicateOperationServiceClient) ForwardOperation(ctx context.Context, in *ForwardOperationRequest, opts ...grpc.CallOption) (*ForwardOperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardOperationResponse)
	err := c.cc.Invoke(ctx, ReplicateOperationService_ForwardOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicateOperationServiceServer is the server API for ReplicateOperationService service.
// All implementations must embed UnimplementedReplicateOperationServiceServer
// for forward compatibility.
type ReplicateOperationServiceServer interface {
	CommitOperation(context.Context, *CommitTransaction) (*CommitOperationResponse, error)
	ApplyOperation(context.Context, *ApplyOperationRequest) (*ApplyOperationResponse, error)
	ForwardOperation(context.Context, *ForwardOperationRequest) (*ForwardOperationResponse, error)
	mustEmbedUnimplementedReplicateOperationServiceServer()
}

// UnimplementedReplicateOperationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReplicateOperationServiceServer struct{}

func (UnimplementedReplicateOperationServiceServer) CommitOperation(context.Context, *CommitTransaction) (*CommitOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitOperation not implemented")
}
func (UnimplementedReplicateOperationServiceServer) ApplyOperation(context.Context, *ApplyOperationRequest) (*ApplyOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyOperation not implemented")
}
func (UnimplementedReplicateOperationServiceServer) ForwardOperation(context.Context, *ForwardOperationRequest) (*ForwardOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardOperation not implemented")
}
func (UnimplementedReplicateOperationServiceServer) mustEmbedUnimplementedReplicateOperationServiceServer() {
}
func (UnimplementedReplicateOperationServiceServer) testEmbeddedByValue() {}

// UnsafeReplicateOperationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicateOperationServiceServer will
// result in compilation errors.
type UnsafeReplicateOperationServiceServer interface {
	mustEmbedUnimplementedReplicateOperationServiceServer()
}

func RegisterReplicateOperationServiceServer(s grpc.ServiceRegistrar, srv ReplicateOperationServiceServer) {
	// If the following call pancis, it indicates UnimplementedReplicateOperationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReplicateOperationService_ServiceDesc, srv)
}

func _ReplicateOperationService_CommitOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicateOperationServiceServer).CommitOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplicateOperationService_CommitOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicateOperationServiceServer).CommitOperation(ctx, req.(*CommitTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicateOperationService_ApplyOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicateOperationServiceServer).ApplyOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplicateOperationService_ApplyOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicateOperationServiceServer).ApplyOperation(ctx, req.(*ApplyOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicateOperationService_ForwardOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicateOperationServiceServer).ForwardOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplicateOperationService_ForwardOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicateOperationServiceServer).ForwardOperation(ctx, req.(*ForwardOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReplicateOperationService_ServiceDesc is the grpc.ServiceDesc for ReplicateOperationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplicateOperationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ReplicateOperationService",
	HandlerType: (*ReplicateOperationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommitOperation",
			Handler:    _ReplicateOperationService_CommitOperation_Handler,
		},
		{
			MethodName: "ApplyOperation",
			Handler:    _ReplicateOperationService_ApplyOperation_Handler,
		},
		{
			MethodName: "ForwardOperation",
			Handler:    _ReplicateOperationService_ForwardOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft/proto/replicate_ops.proto",
}
